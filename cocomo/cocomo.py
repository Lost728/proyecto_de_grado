import sys
import math
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QGridLayout,
                             QGroupBox, QLabel, QLineEdit, QPushButton, QComboBox, QTabWidget, 
                             QTextEdit, QDoubleSpinBox, QSpinBox, QMessageBox)
from PyQt5.QtGui import QFont, QPixmap, QIcon
from PyQt5.QtCore import Qt

class MinecraftCOCOMOApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Calculadora COCOMO - Minecraft Edition")
        self.setWindowIcon(QIcon("creeper_icon.png"))  # Necesitar√≠as tener un icono
        self.setMinimumSize(900, 700)
        
        # Crear pesta√±as
        self.tabs = QTabWidget()
        self.setCentralWidget(self.tabs)
        
        # Crear las diferentes pesta√±as
        self.create_intro_tab()
        self.create_params_tab()
        self.create_calculation_tab()
        self.create_results_tab()
        
        # Variables para almacenar resultados
        self.pf_nominal = 0
        self.pf_real = 0
        self.esfuerzo = 0
        self.duracion_semanas = 0
        self.costo = 0
        
    def create_intro_tab(self):
        tab = QWidget()
        layout = QVBoxLayout()
        
        # T√≠tulo
        title = QLabel("Calculadora COCOMO - Minecraft Edition")
        title.setFont(QFont("Arial", 16, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        title.setStyleSheet("color: #4CAF50;")
        layout.addWidget(title)
        
        # Imagen Minecraft (simulada con un widget)
        img_label = QLabel()
        img_label.setAlignment(Qt.AlignCenter)
        img_label.setText("‚öíÔ∏è [Imagen de Minecraft] ‚öíÔ∏è")
        img_label.setFont(QFont("Arial", 24))
        img_label.setStyleSheet("background-color: #8B4513; color: #FFD700; padding: 20px;")
        layout.addWidget(img_label)
        
        # Descripci√≥n
        desc = QLabel(
            "Esta herramienta calcula el esfuerzo, duraci√≥n y costo de proyectos de software\n"
            "usando el modelo COCOMO, con una analog√≠a de construcci√≥n en Minecraft.\n\n"
            "¬øConstruir√°s una caba√±a simple (org√°nico), un castillo (semi-acoplado)\n"
            "o una ciudad flotante con granjas autom√°ticas (empotrado)?\n\n"
            "¬°Selecciona el tipo de proyecto y completa los par√°metros para calcular!"
        )
        desc.setFont(QFont("Arial", 12))
        desc.setAlignment(Qt.AlignCenter)
        layout.addWidget(desc)
        
        # Tipos de proyectos en Minecraft
        projects_group = QGroupBox("Tipos de Proyectos en Minecraft")
        projects_layout = QGridLayout()
        
        # Proyecto org√°nico
        org_label = QLabel("‚öîÔ∏è Org√°nico: Cabana de madera\n- <50k bloques\n- Terreno plano\n- Sin redstone")
        org_label.setFont(QFont("Arial", 10))
        projects_layout.addWidget(org_label, 0, 0)
        
        # Proyecto semi-acoplado
        semi_label = QLabel("üè∞ Semi-Acoplado: Castillo medieval\n- <300k bloques\n- Redstone b√°sico\n- Terreno monta√±oso")
        semi_label.setFont(QFont("Arial", 10))
        projects_layout.addWidget(semi_label, 0, 1)
        
        # Proyecto empotrado
        emb_label = QLabel("üåå Empotrado: Ciudad flotante con granjas autom√°ticas\n- >300k bloques\n- Redstone complejo\n- Mods avanzados\n- En el Nether")
        emb_label.setFont(QFont("Arial", 10))
        projects_layout.addWidget(emb_label, 0, 2)
        
        projects_group.setLayout(projects_layout)
        layout.addWidget(projects_group)
        
        # Bot√≥n para continuar
        next_btn = QPushButton("Comenzar C√°lculos ‚Üí")
        next_btn.setFont(QFont("Arial", 12, QFont.Bold))
        next_btn.setStyleSheet("background-color: #4CAF50; color: white; padding: 10px;")
        next_btn.clicked.connect(lambda: self.tabs.setCurrentIndex(1))
        layout.addWidget(next_btn)
        
        tab.setLayout(layout)
        self.tabs.addTab(tab, "Introducci√≥n")
    
    def create_params_tab(self):
        tab = QWidget()
        layout = QVBoxLayout()
        
        # T√≠tulo
        title = QLabel("Par√°metros del Proyecto")
        title.setFont(QFont("Arial", 14, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)
        
        # Grupo para par√°metros de puntos de funci√≥n
        pf_group = QGroupBox("Puntos de Funci√≥n (Bloques en Minecraft)")
        pf_layout = QGridLayout()
        
        pf_layout.addWidget(QLabel("N√∫mero de entradas: -elemento interactivos-"), 0, 0)
        self.entradas = QSpinBox()
        self.entradas.setRange(0, 100)
        self.entradas.setValue(12)
        pf_layout.addWidget(self.entradas, 0, 1)
        
        pf_layout.addWidget(QLabel("N√∫mero de salidas: -resultado de los elemntos interactivos-"), 1, 0)
        self.salidas = QSpinBox()
        self.salidas.setRange(0, 100)
        self.salidas.setValue(14)
        pf_layout.addWidget(self.salidas, 1, 1)
        
        pf_layout.addWidget(QLabel("N√∫mero de peticiones: -procesos internos entre entrada y salida-"), 2, 0)
        self.peticiones = QSpinBox()
        self.peticiones.setRange(0, 100)
        self.peticiones.setValue(11)
        pf_layout.addWidget(self.peticiones, 2, 1)
        
        pf_layout.addWidget(QLabel("N√∫mero de archivos: -son la tablas de la BD-"), 3, 0)
        self.archivos = QSpinBox()
        self.archivos.setRange(0, 100)
        self.archivos.setValue(16)
        pf_layout.addWidget(self.archivos, 3, 1)
        
        pf_layout.addWidget(QLabel("N√∫mero de interfaces:"), 4, 0)
        self.interfaces = QSpinBox()
        self.interfaces.setRange(0, 100)
        self.interfaces.setValue(0)
        pf_layout.addWidget(self.interfaces, 4, 1)
        
        pf_group.setLayout(pf_layout)
        layout.addWidget(pf_group)
        
        # Grupo para factores de ajuste
        fa_group = QGroupBox("Factores de Ajuste (Complejidad en Minecraft)")
        fa_layout = QGridLayout()
        
        questions = [
            "1. ¬øRequiere copias de seguridad?",
            "2. ¬øRequiere comunicaci√≥n de datos?",
            "3. ¬øExisten funciones distribuidas?",
            "4. ¬øEs cr√≠tico el funcionamiento?",
            "5. ¬øEntorno operativo complejo?",
            "6. ¬øEntrada de datos interactivos?",
            "7. ¬øEntrada en m√∫ltiples pantallas?",
            "8. ¬øActualizaci√≥n interactiva de archivos?",
            "9. ¬øComplejidad en E/S?",
            "10. ¬øComplejidad de procesamiento?",
            "11. ¬øDise√±o para reutilizaci√≥n?",
            "12. ¬øIncluye conversi√≥n e instalaci√≥n?",
            "13. ¬øSoporte para m√∫ltiples instalaciones?",
            "14. ¬øFacilitaci√≥n para cambios?"
        ]
        
        self.fa_values = []
        for i, question in enumerate(questions):
            fa_layout.addWidget(QLabel(question), i, 0)
            spinbox = QSpinBox()
            spinbox.setRange(1, 5)
            spinbox.setValue(4 if i < 4 else 3)
            fa_layout.addWidget(spinbox, i, 1)
            self.fa_values.append(spinbox)
        
        fa_group.setLayout(fa_layout)
        layout.addWidget(fa_group)
        
        # Grupo para par√°metros adicionales
        params_group = QGroupBox("Par√°metros Adicionales")
        params_layout = QGridLayout()
        
        params_layout.addWidget(QLabel("Tipo de proyecto:"), 0, 0)
        self.tipo_proyecto = QComboBox()
        self.tipo_proyecto.addItems(["Org√°nico (Caba√±a)", "Semi-Acoplado (Castillo)", "Empotrado (Ciudad flotante)"])
        params_layout.addWidget(self.tipo_proyecto, 0, 1)
        
        params_layout.addWidget(QLabel("% Reutilizaci√≥n:"), 1, 0)
        self.reutilizacion = QDoubleSpinBox()
        self.reutilizacion.setRange(0, 100)
        self.reutilizacion.setValue(35)
        self.reutilizacion.setSuffix("%")
        params_layout.addWidget(self.reutilizacion, 1, 1)
        
        params_layout.addWidget(QLabel("Productividad:"), 2, 0)
        self.productividad = QDoubleSpinBox()
        self.productividad.setRange(0.1, 10)
        self.productividad.setValue(2)
        self.productividad.setSuffix(" PF/hora")
        params_layout.addWidget(self.productividad, 2, 1)
        
        params_layout.addWidget(QLabel("Sueldo m√≠nimo:"), 3, 0)
        self.sueldo_min = QDoubleSpinBox()
        self.sueldo_min.setRange(0, 10000)
        self.sueldo_min.setValue(3500)
        self.sueldo_min.setPrefix("$")
        params_layout.addWidget(self.sueldo_min, 3, 1)
        
        params_layout.addWidget(QLabel("Sueldo m√°s probable:"), 4, 0)
        self.sueldo_mp = QDoubleSpinBox()
        self.sueldo_mp.setRange(0, 10000)
        self.sueldo_mp.setValue(6500)
        self.sueldo_mp.setPrefix("$")
        params_layout.addWidget(self.sueldo_mp, 4, 1)
        
        params_layout.addWidget(QLabel("Sueldo m√°ximo:"), 5, 0)
        self.sueldo_max = QDoubleSpinBox()
        self.sueldo_max.setRange(0, 10000)
        self.sueldo_max.setValue(7000)
        self.sueldo_max.setPrefix("$")
        params_layout.addWidget(self.sueldo_max, 5, 1)
        
        params_group.setLayout(params_layout)
        layout.addWidget(params_group)
        
        # Botones
        btn_layout = QHBoxLayout()
        
        back_btn = QPushButton("‚Üê Volver")
        back_btn.setStyleSheet("background-color: #f44336; color: white; padding: 8px;")
        back_btn.clicked.connect(lambda: self.tabs.setCurrentIndex(0))
        btn_layout.addWidget(back_btn)
        
        calc_btn = QPushButton("Calcular Proyecto")
        calc_btn.setStyleSheet("background-color: #4CAF50; color: white; padding: 8px;")
        calc_btn.clicked.connect(self.calculate_cocomo)
        btn_layout.addWidget(calc_btn)
        
        layout.addLayout(btn_layout)
        
        tab.setLayout(layout)
        self.tabs.addTab(tab, "Par√°metros")
    
    def create_calculation_tab(self):
        tab = QWidget()
        layout = QVBoxLayout()
        
        # T√≠tulo
        title = QLabel("C√°lculos COCOMO")
        title.setFont(QFont("Arial", 14, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)
        
        # Grupo para c√°lculos intermedios
        calc_group = QGroupBox("Proceso de C√°lculo")
        calc_layout = QVBoxLayout()
        
        self.calc_text = QTextEdit()
        self.calc_text.setReadOnly(True)
        self.calc_text.setFont(QFont("Courier New", 10))
        self.calc_text.setStyleSheet("background-color: #f0f0f0;")
        calc_layout.addWidget(self.calc_text)
        
        calc_group.setLayout(calc_layout)
        layout.addWidget(calc_group)
        
        # Grupo para resultados intermedios
        results_group = QGroupBox("Resultados Intermedios")
        results_layout = QGridLayout()
        
        results_layout.addWidget(QLabel("PF Nominal:"), 0, 0)
        self.pf_nominal_label = QLabel("0")
        results_layout.addWidget(self.pf_nominal_label, 0, 1)
        
        results_layout.addWidget(QLabel("Promedio Factores de Ajuste:"), 1, 0)
        self.fa_prom_label = QLabel("0")
        results_layout.addWidget(self.fa_prom_label, 1, 1)
        
        results_layout.addWidget(QLabel("PF Ajustado:"), 2, 0)
        self.pf_ajust_label = QLabel("0")
        results_layout.addWidget(self.pf_ajust_label, 2, 1)
        
        results_layout.addWidget(QLabel("PF Real:"), 3, 0)
        self.pf_real_label = QLabel("0")
        results_layout.addWidget(self.pf_real_label, 3, 1)
        
        results_layout.addWidget(QLabel("Tipo de Proyecto:"), 4, 0)
        self.tipo_label = QLabel("")
        results_layout.addWidget(self.tipo_label, 4, 1)
        
        results_layout.addWidget(QLabel("Coeficientes (a, b, c, d):"), 5, 0)
        self.coef_label = QLabel("")
        results_layout.addWidget(self.coef_label, 5, 1)
        
        results_group.setLayout(results_layout)
        layout.addWidget(results_group)
        
        # Botones
        btn_layout = QHBoxLayout()
        
        back_btn = QPushButton("‚Üê Ajustar Par√°metros")
        back_btn.setStyleSheet("background-color: #f44336; color: white; padding: 8px;")
        back_btn.clicked.connect(lambda: self.tabs.setCurrentIndex(1))
        btn_layout.addWidget(back_btn)
        
        next_btn = QPushButton("Ver Resultados Finales ‚Üí")
        next_btn.setStyleSheet("background-color: #2196F3; color: white; padding: 8px;")
        next_btn.clicked.connect(lambda: self.tabs.setCurrentIndex(3))
        btn_layout.addWidget(next_btn)
        
        layout.addLayout(btn_layout)
        
        tab.setLayout(layout)
        self.tabs.addTab(tab, "C√°lculos")
    
    def create_results_tab(self):
        tab = QWidget()
        layout = QVBoxLayout()
        
        # T√≠tulo
        title = QLabel("Resultados Finales")
        title.setFont(QFont("Arial", 14, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)
        
        # Grupo para resultados principales
        results_group = QGroupBox("Resultados COCOMO")
        results_layout = QGridLayout()
        
        results_layout.addWidget(QLabel("Esfuerzo estimado:"), 0, 0)
        self.esfuerzo_label = QLabel("0")
        self.esfuerzo_label.setStyleSheet("font-weight: bold; color: #2196F3;")
        results_layout.addWidget(self.esfuerzo_label, 0, 1)
        
        results_layout.addWidget(QLabel("Duraci√≥n del proyecto:"), 1, 0)
        self.duracion_label = QLabel("0 semanas (0 meses)")
        self.duracion_label.setStyleSheet("font-weight: bold; color: #2196F3;")
        results_layout.addWidget(self.duracion_label, 1, 1)
        
        results_layout.addWidget(QLabel("Costo del proyecto:"), 2, 0)
        self.costo_label = QLabel("$0")
        self.costo_label.setStyleSheet("font-weight: bold; color: #4CAF50;")
        results_layout.addWidget(self.costo_label, 2, 1)
        
        results_layout.addWidget(QLabel("Costo por PF:"), 3, 0)
        self.costo_pf_label = QLabel("$0")
        results_layout.addWidget(self.costo_pf_label, 3, 1)
        
        results_group.setLayout(results_layout)
        layout.addWidget(results_group)
        
        # Grupo para analog√≠a Minecraft
        mc_group = QGroupBox("Equivalente en Minecraft")
        mc_layout = QVBoxLayout()
        
        self.mc_analogy = QTextEdit()
        self.mc_analogy.setReadOnly(True)
        self.mc_analogy.setFont(QFont("Arial", 11))
        self.mc_analogy.setStyleSheet("background-color: #E8F5E9;")
        mc_layout.addWidget(self.mc_analogy)
        
        mc_group.setLayout(mc_layout)
        layout.addWidget(mc_group)
        
        # Grupo para resumen
        summary_group = QGroupBox("Resumen del Proyecto")
        summary_layout = QVBoxLayout()
        
        self.summary_text = QTextEdit()
        self.summary_text.setReadOnly(True)
        self.summary_text.setFont(QFont("Arial", 10))
        self.summary_text.setStyleSheet("background-color: #FFFDE7;")
        summary_layout.addWidget(self.summary_text)
        
        summary_group.setLayout(summary_layout)
        layout.addWidget(summary_group)
        
        # Botones
        btn_layout = QHBoxLayout()
        
        restart_btn = QPushButton("Reiniciar C√°lculos")
        restart_btn.setStyleSheet("background-color: #FF9800; color: white; padding: 8px;")
        restart_btn.clicked.connect(self.restart)
        btn_layout.addWidget(restart_btn)
        
        export_btn = QPushButton("Exportar Resultados")
        export_btn.setStyleSheet("background-color: #9C27B0; color: white; padding: 8px;")
        btn_layout.addWidget(export_btn)
        
        layout.addLayout(btn_layout)
        
        tab.setLayout(layout)
        self.tabs.addTab(tab, "Resultados")
    
    def calculate_cocomo(self):
        try:
            # Calcular puntos de funci√≥n nominales
            self.pf_nominal = (
                self.entradas.value() * 4 +  # Peso medio para entradas
                self.salidas.value() * 5 +   # Peso medio para salidas
                self.peticiones.value() * 4 + # Peso medio para peticiones
                self.archivos.value() * 10 +  # Peso medio para archivos
                self.interfaces.value() * 7   # Peso simple para interfaces
            )
            
            # Calcular promedio de factores de ajuste
            total_fa = sum(spinbox.value() for spinbox in self.fa_values)
            fa_prom = total_fa / len(self.fa_values)
            
            # Calcular PF ajustado
            pf_ajustado = self.pf_nominal * (0.65 + 0.01 * fa_prom)
            
            # Calcular PF reales con reutilizaci√≥n
            reutilizacion = self.reutilizacion.value() / 100.0
            self.pf_real = pf_ajustado * (1 - reutilizacion)
            
            # Obtener coeficientes seg√∫n tipo de proyecto
            tipo_index = self.tipo_proyecto.currentIndex()
            if tipo_index == 0:  # Org√°nico
                a, b, c, d = 2.4, 1.05, 2.5, 0.38
                tipo = "Org√°nico (Caba√±a)"
            elif tipo_index == 1:  # Semi-acoplado
                a, b, c, d = 3.0, 1.12, 2.5, 0.35
                tipo = "Semi-Acoplado (Castillo)"
            else:  # Empotrado
                a, b, c, d = 3.6, 1.20, 2.5, 0.32
                tipo = "Empotrado (Ciudad flotante)"
            
            # Calcular esfuerzo
            self.esfuerzo = a * (self.pf_real ** b)
            
            # Calcular duraci√≥n en semanas
            self.duracion_semanas = c * (self.esfuerzo ** d)
            duracion_meses = self.duracion_semanas / 4.33  # Aproximaci√≥n de semanas por mes
            
            # Calcular costos
            ve = (self.sueldo_min.value() + 4 * self.sueldo_mp.value() + self.sueldo_max.value()) / 6
            costo_pf = ve / self.productividad.value()
            self.costo = costo_pf * self.pf_real
            
            # Actualizar pesta√±a de c√°lculos
            self.calc_text.clear()
            self.calc_text.append("=== C√ÅLCULO DE PUNTOS DE FUNCI√ìN ===")
            self.calc_text.append(f"Entradas: {self.entradas.value()} x 4 = {self.entradas.value() * 4}")
            self.calc_text.append(f"Salidas: {self.salidas.value()} x 5 = {self.salidas.value() * 5}")
            self.calc_text.append(f"Peticiones: {self.peticiones.value()} x 4 = {self.peticiones.value() * 4}")
            self.calc_text.append(f"Archivos: {self.archivos.value()} x 10 = {self.archivos.value() * 10}")
            self.calc_text.append(f"Interfaces: {self.interfaces.value()} x 7 = {self.interfaces.value() * 7}")
            self.calc_text.append(f"\nPF Nominal: {self.pf_nominal:.2f}")
            
            self.calc_text.append("\n=== FACTORES DE AJUSTE ===")
            self.calc_text.append(f"Total factores: {total_fa}")
            self.calc_text.append(f"Promedio FA: {fa_prom:.4f}")
            self.calc_text.append(f"PF Ajustado: {pf_ajustado:.2f}")
            self.calc_text.append(f"Reutilizaci√≥n: {self.reutilizacion.value()}%")
            self.calc_text.append(f"PF Real: {self.pf_real:.2f}")
            
            self.calc_text.append("\n=== C√ÅLCULO COCOMO ===")
            self.calc_text.append(f"Tipo de proyecto: {tipo}")
            self.calc_text.append(f"Coeficientes: a={a}, b={b}, c={c}, d={d}")
            self.calc_text.append(f"Esfuerzo = {a} * ({self.pf_real:.2f})^{b:.2f} = {self.esfuerzo:.2f} horas-persona")
            self.calc_text.append(f"Duraci√≥n = {c} * ({self.esfuerzo:.2f})^{d:.2f} = {self.duracion_semanas:.2f} semanas")
            
            self.calc_text.append("\n=== C√ÅLCULO DE COSTOS ===")
            self.calc_text.append(f"VE = ({self.sueldo_min.value()} + 4*{self.sueldo_mp.value()} + {self.sueldo_max.value()})/6 = {ve:.2f}")
            self.calc_text.append(f"Costo por PF = {ve:.2f} / {self.productividad.value()} = {costo_pf:.2f}")
            self.calc_text.append(f"Costo total = {costo_pf:.2f} * {self.pf_real:.2f} = ${self.costo:.2f}")
            
            # Actualizar etiquetas de resultados intermedios
            self.pf_nominal_label.setText(f"{self.pf_nominal:.2f}")
            self.fa_prom_label.setText(f"{fa_prom:.4f}")
            self.pf_ajust_label.setText(f"{pf_ajustado:.2f}")
            self.pf_real_label.setText(f"{self.pf_real:.2f}")
            self.tipo_label.setText(tipo)
            self.coef_label.setText(f"a={a}, b={b}, c={c}, d={d}")
            
            # Actualizar resultados finales
            self.esfuerzo_label.setText(f"{self.esfuerzo:.2f} horas-persona")
            self.duracion_label.setText(f"{self.duracion_semanas:.2f} semanas ({duracion_meses:.1f} meses)")
            self.costo_label.setText(f"${self.costo:,.2f}")
            self.costo_pf_label.setText(f"${costo_pf:.2f}")
            
            # Crear analog√≠a de Minecraft
            self.create_minecraft_analogy(tipo_index, self.pf_real, self.esfuerzo, duracion_meses, self.costo)
            
            # Crear resumen
            self.create_summary()
            
            # Cambiar a pesta√±a de c√°lculos
            self.tabs.setCurrentIndex(2)
            
        except Exception as e:
            QMessageBox.critical(self, "Error de c√°lculo", f"Ocurri√≥ un error durante los c√°lculos:\n{str(e)}")
    
    def create_minecraft_analogy(self, tipo, pf_real, esfuerzo, duracion_meses, costo):
        analogy_text = ""
        
        if tipo == 0:  # Org√°nico
            analogy_text = (
                "üè† Proyecto: Caba√±a de Madera (Org√°nico)\n\n"
                f"üî® Bloques necesarios: {int(pf_real)} bloques\n"
                f"‚è±Ô∏è Tiempo estimado: {int(esfuerzo/10)} minutos de juego\n"
                f"üìÖ Duraci√≥n: {duracion_meses:.1f} meses (equivalente a {int(duracion_meses*4)} sesiones de Minecraft)\n\n"
                "Recursos necesarios:\n"
                "- Madera: 5 stacks\n"
                "- Piedra: 2 stacks\n"
                "- Cristal: 1 stack\n"
                "- Puertas y trampillas: 10 unidades\n\n"
                f"üíé Costo en esmeraldas: {int(costo/100)} esmeraldas\n"
                "üëç Dificultad: F√°cil - Ideal para principiantes"
            )
        elif tipo == 1:  # Semi-acoplado
            analogy_text = (
                "üè∞ Proyecto: Castillo Medieval (Semi-Acoplado)\n\n"
                f"üî® Bloques necesarios: {int(pf_real)} bloques\n"
                f"‚è±Ô∏è Tiempo estimado: {int(esfuerzo/8)} minutos de juego\n"
                f"üìÖ Duraci√≥n: {duracion_meses:.1f} meses (equivalente a {int(duracion_meses*4)} sesiones de Minecraft)\n\n"
                "Recursos necesarios:\n"
                "- Piedra: 20 stacks\n"
                "- Madera oscura: 10 stacks\n"
                "- Hierro: 5 stacks\n"
                "- Redstone: 2 stacks\n"
                "- Antorchas: 1 stack\n\n"
                f"üíé Costo en esmeraldas: {int(costo/100)} esmeraldas\n"
                "üëç Dificultad: Media - Requiere planificaci√≥n"
            )
        else:  # Empotrado
            analogy_text = (
                "üåå Proyecto: Ciudad Flotante con Granjas (Empotrado)\n\n"
                f"üî® Bloques necesarios: {int(pf_real)} bloques\n"
                f"‚è±Ô∏è Tiempo estimado: {int(esfuerzo/5)} minutos de juego\n"
                f"üìÖ Duraci√≥n: {duracion_meses:.1f} meses (equivalente a {int(duracion_meses*4)} sesiones de Minecraft)\n\n"
                "Recursos necesarios:\n"
                "- Obsidiana: 30 stacks\n"
                "- Cristal: 20 stacks\n"
                "- Redstone: 10 stacks\n"
                "- Slime blocks: 5 stacks\n"
                "- Mods avanzados: 3\n\n"
                f"üíé Costo en esmeraldas: {int(costo/100)} esmeraldas\n"
                "üëç Dificultad: Dif√≠cil - Solo para expertos"
            )
        
        self.mc_analogy.setText(analogy_text)
    
    def create_summary(self):
        summary = (
            "RESUMEN DEL PROYECTO\n\n"
            f"Tipo de proyecto: {self.tipo_proyecto.currentText()}\n"
            f"Puntos de Funci√≥n Nominales: {self.pf_nominal:.2f}\n"
            f"Puntos de Funci√≥n Reales: {self.pf_real:.2f}\n"
            f"Esfuerzo estimado: {self.esfuerzo:.2f} horas-persona\n"
            f"Duraci√≥n estimada: {self.duracion_semanas:.2f} semanas\n"
            f"Costo total estimado: ${self.costo:,.2f}\n\n"
            "RECOMENDACIONES:\n"
        )
        
        if self.tipo_proyecto.currentIndex() == 0:
            summary += (
                "- Este proyecto es relativamente simple\n"
                "- Se recomienda un equipo peque√±o (2-3 personas)\n"
                "- El riesgo es bajo, se puede completar f√°cilmente"
            )
        elif self.tipo_proyecto.currentIndex() == 1:
            summary += (
                "- Este proyecto tiene complejidad media\n"
                "- Se recomienda un equipo de 4-6 personas\n"
                "- Es importante realizar revisiones peri√≥dicas\n"
                "- Asignar recursos adicionales para partes complejas"
            )
        else:
            summary += (
                "- Este proyecto es altamente complejo\n"
                "- Se requiere un equipo experimentado de 7+ personas\n"
                "- Implementar metodolog√≠as √°giles con sprints cortos\n"
                "- Realizar prototipos para partes cr√≠ticas\n"
                "- Asignar un 20% adicional para imprevistos"
            )
        
        self.summary_text.setText(summary)
    
    def restart(self):
        # Resetear valores
        self.entradas.setValue(12)
        self.salidas.setValue(14)
        self.peticiones.setValue(11)
        self.archivos.setValue(16)
        self.interfaces.setValue(0)
        
        for spinbox in self.fa_values:
            spinbox.setValue(4 if self.fa_values.index(spinbox) < 4 else 3)
        
        self.tipo_proyecto.setCurrentIndex(1)
        self.reutilizacion.setValue(35)
        self.productividad.setValue(2)
        self.sueldo_min.setValue(3500)
        self.sueldo_mp.setValue(6500)
        self.sueldo_max.setValue(7000)
        
        # Regresar a la primera pesta√±a
        self.tabs.setCurrentIndex(0)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    
    # Estilo para la aplicaci√≥n
    app.setStyle("Fusion")
    app.setStyleSheet("""
        QMainWindow {
            background-color: #F5F5F5;
        }
        QGroupBox {
            font-weight: bold;
            border: 1px solid #BDBDBD;
            border-radius: 5px;
            margin-top: 1ex;
        }
        QGroupBox::title {
            subcontrol-origin: margin;
            subcontrol-position: top center;
            padding: 0 5px;
        }
        QTextEdit {
            background-color: white;
            border: 1px solid #BDBDBD;
            border-radius: 3px;
        }
        QSpinBox, QDoubleSpinBox, QComboBox {
            background-color: white;
            border: 1px solid #BDBDBD;
            border-radius: 3px;
            padding: 2px;
        }
    """)
    
    window = MinecraftCOCOMOApp()
    window.showMaximized()
    sys.exit(app.exec_())